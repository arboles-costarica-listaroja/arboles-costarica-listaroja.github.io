---
title: "Árboles de Costa Rica en la Lista Roja de la UICN"
format: 
  dashboard:
    orientation: columns
    theme: default
server: shiny
---


```{r}
#| label: carga-paquetes
#| context: setup
#| warning: false
#| message: false


# Carga de paquetes
library(dplyr)
library(tidyr)
library(DT)
library(ggplot2)
library(plotly)
library(sf)
library(leaflet)
library(leaflet.extras)
library(leafem)
```


```{r}
#| label: carga-datos
#| context: data
#| eval: true


# RUTAS DE ARCHIVOS DE ENTRADA

# Áreas de Conservación
ARCHIVO_GPKG_AREAS_CONSERVACION <- "areas-conservacion.gpkg"

# Áreas Silvestres Protegidas
ARCHIVO_GPKG_ASP <- "areas-silvestres-protegidas.gpkg"

# Corredores Biológicos
ARCHIVO_GPKG_CORREDORES_BIOLOGICOS <- "corredores-biologicos.gpkg"

# Registros de presencia
ARCHIVO_GPKG_REGISTROS_PRESENCIA <- "registros-presencia.gpkg"


# CARGA DE DATOS

# Áreas de Conservación
areas_conservacion <- st_read(ARCHIVO_GPKG_AREAS_CONSERVACION, quiet = TRUE)

# Áreas Silvestres Protegidas
asp <- st_read(ARCHIVO_GPKG_ASP, quiet = TRUE) |> 
  rename(codigo_asp = codigo)

# Corredores Biológicos
corredores_biologicos <- st_read(ARCHIVO_GPKG_CORREDORES_BIOLOGICOS, quiet = TRUE) |>
  rename(codigo_cb = codigo)

# Registros de presencia
registros <- 
  st_read(
    dsn = ARCHIVO_GPKG_REGISTROS_PRESENCIA,
    quiet = TRUE
  )
# Asignación del CRS WGS84 a los registros de presencia
st_crs(registros) <- 4326


# UNIONES

# Registros de presencia unidos con polígonos de zonas 
# Áreas Silvestres Protegidas
registros_union_zonas <-
  st_join(
    x = registros,
    y = select(asp, codigo_asp, nombre_asp)
  )
# Áreas de conservación
registros_union_zonas <-
  st_join(
    x = registros_union_zonas,
    y = select(areas_conservacion, codigo_ac, nombre_ac)
  )
# Corredores Biológicos
registros_union_zonas <-
  st_join(
    x = registros_union_zonas,
    y = select(corredores_biologicos, codigo_cb, nombre_cb)
  )

```

# {.sidebar}

```{r}
#| label: panel-widgets-entrada


h4("Seleccione una categoría de la Lista Roja")

# CATEGORÍAS DE CONSERVACIÓN EN LA LISTA ROJA

# Lista de categorías en la Lista Roja
lista_categorias <- unique(registros_union_zonas$category_iucn_redlist)
lista_categorias <- sort(lista_categorias)
lista_categorias <- c("Todas", lista_categorias)

# Widget de lista de selección de categorías
selectInput(
  inputId = "categoria",
  label = "Categoría de la Lista Roja",
  choices = lista_categorias,
  selected = "Todas"
)
```

# Lista de especies

```{r}
#| label: lista-especies
#| title: "Lista de especies"

dataTableOutput(
	outputId =  "tabla_especies"
)
```

# Riqueza de especies en zonas

## Column {width=50%}

```{r}
#| label: mapa
#| title: "Riqueza de especies en áreas de conservación (AC), áreas silvestres protegidas (ASP) y corredores biológicos (CB)"


leafletOutput(
 outputId =  "mapa"
)
```

## Column {width=50%}

```{r}
#| label: grafico_ac


plotlyOutput(
	outputId =  "grafico_ac"
)
```

```{r}
#| label: grafico_asp


plotlyOutput(
	outputId =  "grafico_asp"
)
```

```{r}
#| label: grafico_cb


plotlyOutput(
	outputId =  "grafico_cb"
)
```

# Listas de especies en zonas

## Row {.tabset}

```{r}
#| label: registros_ac
#| title: "Especies en áreas de conservación"

dataTableOutput(
	outputId =  "tabla_ac"
)
```

```{r}
#| label: registros_asp
#| title: "Especies en áreas silvestres protegidas"

dataTableOutput(
	outputId =  "tabla_asp"
)
```

```{r}
#| label: registros_cb
#| title: "Especies en corredores biológicos"

dataTableOutput(
	outputId =  "tabla_cb"
)
```


```{r}
#| label: servidor
#| context: server


# Función reactiva para filtrar los registros de presencia
filtrar_registros <- reactive({
  # Valor inicial del objeto que va a retornarse
  registros_filtrados <- registros_union_zonas

  if (input$categoria != "Todas") {
    registros_filtrados <-
      registros_filtrados |>
      filter(category_iucn_redlist == input$categoria)
  }

  return(registros_filtrados)
})


# Mapa
output$mapa <- renderLeaflet({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()
  
  
  # RIQUEZA DE ESPECIES EN ÁREAS DE CONSERVACIÓN
  riqueza_especies_ac <-
    registros_filtrados |>
    st_drop_geometry() |>
    group_by(codigo_ac) |>
    summarize(riqueza_especies = n_distinct(species, na.rm = TRUE))
  
  # Unión no espacial de AC y riqueza de especies
  ac_union_riqueza <-
    left_join(
      x = areas_conservacion,
      y = dplyr::select(riqueza_especies_ac, codigo_ac, riqueza_especies),
      by = "codigo_ac"
    ) |>
    replace_na(list(riqueza_especies = 0))  
  
  # Paleta de colores de riqueza de especies
  colores_riqueza_especies_ac <- colorNumeric(
    palette = "Reds",
    domain = ac_union_riqueza$riqueza_especies,
    na.color = "transparent"
  )
  

  # RIQUEZA DE ESPECIES EN ÁREAS SILVESTRES PROTEGIDAS
  riqueza_especies_asp <-
    registros_filtrados |>
    st_drop_geometry() |>
    group_by(codigo_asp) |>
    summarize(riqueza_especies = n_distinct(species, na.rm = TRUE))
  
  # Unión no espacial de ASP y riqueza de especies
  asp_union_riqueza <-
    left_join(
      x = asp,
      y = dplyr::select(riqueza_especies_asp, codigo_asp, riqueza_especies),
      by = "codigo_asp"
    ) |>
    replace_na(list(riqueza_especies = 0))  
  
  # Paleta de colores de riqueza de especies
  colores_riqueza_especies_asp <- colorNumeric(
    palette = "Greens",
    domain = asp_union_riqueza$riqueza_especies,
    na.color = "transparent"
  )
  
  
  # RIQUEZA DE ESPECIES EN CORREDORES BIOLÓGICOS
  riqueza_especies_cb <-
    registros_filtrados |>
    st_drop_geometry() |>
    group_by(codigo_cb) |>
    summarize(riqueza_especies = n_distinct(species, na.rm = TRUE))
  
  # Unión no espacial de CB y riqueza de especies
  cb_union_riqueza <-
    left_join(
      x = corredores_biologicos,
      y = dplyr::select(riqueza_especies_cb, codigo_cb, riqueza_especies),
      by = "codigo_cb"
    ) |>
    replace_na(list(riqueza_especies = 0))  
  
  # Paleta de colores de riqueza de especies
  colores_riqueza_especies_cb <- colorNumeric(
    palette = "Blues",
    domain = cb_union_riqueza$riqueza_especies,
    na.color = "transparent"
  )  
  
  
  # Mapa de riqueza de especies
  leaflet() |>
    setView(
      lng = -84.19451,
      lat = 9.972725,
      zoom = 8
    ) |>
    addTiles(group = "OpenStreetMap") |>
    addProviderTiles(provider = providers$Esri.WorldImagery, group = "ESRI World Imagery") |>
    addProviderTiles(provider = providers$CartoDB.Positron, group = "Carto Positron") |>
    addPolygons(
      data = ac_union_riqueza,
      color = "darkgreen",
      fillColor = ~ colores_riqueza_especies_ac(ac_union_riqueza$riqueza_especies),
      fillOpacity = 0.8,
      weight = 2.0,
      stroke = TRUE,
      popup = paste(
        paste0("<strong>Área de Conservación: </strong>", ac_union_riqueza$nombre_ac),
        paste0("<strong>Riqueza de especies: </strong>", ac_union_riqueza$riqueza_especies),
        sep = "<br>"
      ),
      group = "Riqueza de especies en AC"
    ) |>
    addLegend(
      position = "bottomleft",
      pal = colores_riqueza_especies_ac,
      values = ac_union_riqueza$riqueza_especies,
      group = "Riqueza de especies en AC",
      title = "Riqueza de especies en AC"
    ) |>    
    addPolygons(
      data = asp_union_riqueza,
      color = "darkgreen",
      fillColor = ~ colores_riqueza_especies_asp(asp_union_riqueza$riqueza_especies),
      fillOpacity = 0.8,
      weight = 2.0,
      stroke = TRUE,
      popup = paste(
        paste0("<strong>Área Silvestre Protegida: </strong>", asp_union_riqueza$cat_manejo, " ", asp_union_riqueza$nombre_asp),
        paste0("<strong>Riqueza de especies: </strong>", asp_union_riqueza$riqueza_especies),
        sep = "<br>"
      ),
      group = "Riqueza de especies en ASP"
    ) |>
    addLegend(
      position = "bottomleft",
      pal = colores_riqueza_especies_asp,
      values = asp_union_riqueza$riqueza_especies,
      group = "Riqueza de especies en ASP",
      title = "Riqueza de especies en ASP"
    ) |>
    addPolygons(
      data = cb_union_riqueza,
      color = "blue",
      fillColor = ~ colores_riqueza_especies_cb(cb_union_riqueza$riqueza_especies),
      fillOpacity = 0.8,
      weight = 2.0,
      stroke = TRUE,
      popup = paste(
        paste0("<strong>Corredor Biológico: </strong>", cb_union_riqueza$nombre_cb),
        paste0("<strong>Riqueza de especies: </strong>", cb_union_riqueza$riqueza_especies),
        sep = "<br>"
      ),
      group = "Riqueza de especies en CB"
    ) |>
    addLegend(
      position = "bottomleft",
      pal = colores_riqueza_especies_cb,
      values = cb_union_riqueza$riqueza_especies,
      group = "Riqueza de especies en CB",
      title = "Riqueza de especies en CB"
    ) |>    
    addCircleMarkers(
      data = registros_filtrados,
      radius = 2,
      color = "red",
      clusterOptions = markerClusterOptions(),
      popup = paste(
        paste0("<strong>Especie: </strong>", registros_filtrados$species),
        paste0("<strong>Categoría en la Lista Roja: </strong>", registros_filtrados$category_iucn_redlist),
        paste0("<strong>Área de Conservación: </strong>", registros_filtrados$nombre_ac),
        paste0("<strong>Área Silvestre Protegida: </strong>", registros_filtrados$nombre_asp),
        paste0("<strong>Corredor Biológico: </strong>", registros_filtrados$nombre_cb),
        sep = "<br>"
      ),
      group = "Registros de presencia"
    ) |>
    addLayersControl(
      baseGroups = c("OpenStreetMap", "ESRI World Imagery", "Carto Positron"),
      overlayGroups = c(
        "Riqueza de especies en AC", 
        "Riqueza de especies en ASP", 
        "Riqueza de especies en CB",
        "Registros de presencia"
      )
    ) |>
    addScaleBar(
      position = "bottomright", 
      options = scaleBarOptions(imperial = FALSE)
    ) |>    
    addResetMapButton() |>
    addSearchOSM() |>
    addMouseCoordinates() |>
    addFullscreenControl() |>
    hideGroup("Riqueza de especies en ASP") |>
    hideGroup("Riqueza de especies en CB")
  })


# Gráfico de cantidad de especies en AC
output$grafico_ac <- renderPlotly({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Conteo de especies por AC
  riqueza_especies_ac <-
    registros_filtrados |>
    st_drop_geometry() |>
    group_by(codigo_ac) |>
    summarize(riqueza_especies = n_distinct(species, na.rm = TRUE))
  
  # Unión no espacial de AC y riqueza de especies
  ac_union_riqueza <-
    left_join(
      x = areas_conservacion,
      y = dplyr::select(riqueza_especies_ac, codigo_ac, riqueza_especies),
      by = "codigo_ac"
    ) |>
    replace_na(list(riqueza_especies = 0))  

  # Gráfico
  grafico_ggplot2 <-
    ac_union_riqueza |>
    arrange(desc(riqueza_especies)) |>
    slice((1:15)) |>
    ggplot(aes(
      x = reorder(nombre_ac, -riqueza_especies),
      y = riqueza_especies,
      text = paste(
        paste0("Área de Conservación: ", nombre_ac),
        paste0("Riqueza de especies: ", riqueza_especies),
        sep = "<br>"
      )    
    )) +
    geom_col(fill = "darkred") +
    xlab("Áreas de Conservación") +
    ylab("Riqueza de especies") +  
    theme_classic()
  
  # Gráfico plotly
  grafico_ggplot2 |>
    ggplotly(tooltip = "text") |> 
    layout(
      xaxis = list(tickangle = 30)
    ) |>
    config(locale = "es")
})


# Gráfico de cantidad de especies en ASP
output$grafico_asp <- renderPlotly({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Conteo de especies por ASP
  riqueza_especies_asp <-
    registros_filtrados |>
    st_drop_geometry() |>
    group_by(codigo_asp) |>
    summarize(riqueza_especies = n_distinct(species, na.rm = TRUE))
  
  # Unión no espacial de ASP y riqueza de especies
  asp_union_riqueza <-
    left_join(
      x = asp,
      y = dplyr::select(riqueza_especies_asp, codigo_asp, riqueza_especies),
      by = "codigo_asp"
    ) |>
    replace_na(list(riqueza_especies = 0))  

  # Gráfico
  grafico_ggplot2 <-
    asp_union_riqueza |>
    distinct(nombre_asp, riqueza_especies) |>
    arrange(desc(riqueza_especies)) |>
    slice((1:15)) |>
    ggplot(aes(
      x = reorder(nombre_asp, -riqueza_especies),
      y = riqueza_especies,
      text = paste(
        paste0("Área Silvestre Protegida: ", nombre_asp),
        paste0("Cantidad de especies: ", riqueza_especies),
        sep = "<br>"
      )    
    )) +
    geom_col(fill = "darkgreen") +
    xlab("Áreas Silvestres Protegidas") +
    ylab("Riqueza de especies") +  
    theme_classic()
  
  # Gráfico plotly
  grafico_ggplot2 |>
    ggplotly(tooltip = "text") |> 
    layout(
      xaxis = list(tickangle = 30)
    ) |>
    config(locale = "es")
})


# Gráfico de cantidad de especies en CB
output$grafico_cb <- renderPlotly({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Conteo de especies por CB
  riqueza_especies_cb <-
    registros_filtrados |>
    st_drop_geometry() |>
    group_by(codigo_cb) |>
    summarize(riqueza_especies = n_distinct(species, na.rm = TRUE))
  
  # Unión no espacial de CB y riqueza de especies
  cb_union_riqueza <-
    left_join(
      x = corredores_biologicos,
      y = dplyr::select(riqueza_especies_cb, codigo_cb, riqueza_especies),
      by = "codigo_cb"
    ) |>
    replace_na(list(riqueza_especies = 0))  

  # Gráfico
  grafico_ggplot2 <-
    cb_union_riqueza |>
    distinct(nombre_cb, riqueza_especies) |>
    arrange(desc(riqueza_especies)) |>
    slice((1:15)) |>
    ggplot(aes(
      x = reorder(nombre_cb, -riqueza_especies),
      y = riqueza_especies,
      text = paste(
        paste0("Corredor Biológico: ", nombre_cb),
        paste0("Cantidad de especies: ", riqueza_especies),
        sep = "<br>"
      )    
    )) +
    geom_col(fill = "blue") +
    xlab("Corredores Biológicos") +
    ylab("Riqueza de especies") +  
    theme_classic()
  
  # Gráfico plotly
  grafico_ggplot2 |>
    ggplotly(tooltip = "text") |> 
    layout(
      xaxis = list(tickangle = 30)
    ) |>
    config(locale = "es")
})


# Tabla de especies
output$tabla_especies <- renderDataTable({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Tabla interactiva
  registros_filtrados |>
    st_drop_geometry() |>
    group_by(species, category_iucn_redlist) |>
    summarize(n = n()) |>
    arrange(species) |>
    datatable(
      colnames = c("Especie", "Categoría en la Lista Roja", "Cantidad de registros"),
      rownames = FALSE,
      options = list(
        pageLength = 10,
        language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
      )
    )
})


# Tabla de datos en AC
output$tabla_ac <- renderDataTable({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Tabla interactiva
  registros_filtrados |>
    st_drop_geometry() |>
    group_by(nombre_ac, species, category_iucn_redlist) |>
    summarize(n = n()) |>
    arrange(nombre_ac, species) |>
    datatable(
      colnames = c("Área de Conservación", "Especie", "Categoría en la Lista Roja", "Cantidad de registros"),
      rownames = FALSE,
      options = list(
        pageLength = 10,
        language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
      )
    )
})


# Tabla de datos en ASP
output$tabla_asp <- renderDataTable({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Tabla interactiva
  registros_filtrados |>
    st_drop_geometry() |>
    group_by(nombre_asp, species, category_iucn_redlist) |>
    summarize(n = n()) |>
    arrange(nombre_asp, species) |>
    datatable(
      colnames = c("Área Silvestre Protegida", "Especie", "Categoría en la Lista Roja", "Cantidad de registros"),
      rownames = FALSE,
      options = list(
        pageLength = 10,
        language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
      )
    )
})


# Tabla de datos en CB
output$tabla_cb <- renderDataTable({
  # Filtrado del conjunto de datos
  registros_filtrados <- filtrar_registros()

  
  # Tabla interactiva
  registros_filtrados |>
    st_drop_geometry() |>
    group_by(nombre_cb, species, category_iucn_redlist) |>
    summarize(n = n()) |>
    arrange(nombre_cb, species) |>
    datatable(
      colnames = c("Corredor Biológico", "Especie", "Categoría en la Lista Roja", "Cantidad de registros"),
      rownames = FALSE,
      options = list(
        pageLength = 10,
        language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')
      )
    )
})
```
